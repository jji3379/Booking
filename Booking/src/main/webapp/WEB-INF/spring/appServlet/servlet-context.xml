<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:jpa="http://www.springframework.org/schema/data/jpa"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/data/jpa 
        http://www.springframework.org/schema/data/jpa/spring-jpa.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	<!-- 
        JNDI 데이터 소스 객체 얻어오는 설정   
        Servers/context.xml 에 설정된 oracle 접속정보 가 있어야 된다. 
         
        <Resource name="jdbc/myoracle" auth="Container"
              type="javax.sql.DataSource" driverClassName="oracle.jdbc.OracleDriver"
              url="jdbc:oracle:thin:@127.0.0.1:1521:xe"
              username="scott" password="tiger" maxTotal="20" maxIdle="10"
              maxWaitMillis="-1"/>            
    -->
    <beans:bean id="dataSource" 
        class="org.springframework.jndi.JndiObjectFactoryBean">
        <beans:property name="jndiName" value="java:comp/env/jdbc/BookingDB"/>
    </beans:bean>
    <!-- 
        위는 아래의 코드와 같다
        dataSource = new JndiObjectFactoryBean();
        dataSource.setJndiName("java:comp/env/jdbc/myoracle");
     -->

    <jpa:repositories base-package="com.acorn5.booking" />
    
    <beans:bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
        <beans:property name="dataSource" ref="dataSource"/>
        <beans:property name="jpaVendorAdapter">
            <beans:bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
            </beans:bean>
        </beans:property>
    </beans:bean>
     
    <beans:bean id="transactionManager"
        class="org.springframework.orm.jpa.JpaTransactionManager">
        <beans:property name="entityManagerFactory" ref="entityManagerFactory" />
    </beans:bean>
    
    <!-- SqlSessionFactory 객체 -->
    <!-- <beans:bean id="sessionFactory" 
        class="org.mybatis.spring.SqlSessionFactoryBean">
        <beans:property name="dataSource" ref="dataSource"/>
        <beans:property name="configLocation"
    value="classpath:com/acorn5/booking/mybatis/Configuration.xml"/>
    </beans:bean> -->
    <!-- 
        sessionFactory=new SqlSessionFactoryBean();
        sessionFactory.setDataSource(dataSource);
        sessionFactory.setConfigLocation("classpath:com/gura/xxx");
     -->
    

    <!-- 
        SqlSession 인터페이스를 구현한 
        SqlSessionTemplate(SqlSession) 객체 
        Dao 가 의존하는 객체 
    -->
    <!-- <beans:bean class="org.mybatis.spring.SqlSessionTemplate">
        <beans:constructor-arg name="sqlSessionFactory" 
            ref="sessionFactory"/>
    </beans:bean> -->
    <!-- 
        new SqlSessionTemplate(sessionFactory);
     -->
         
     <!-- Multipart 폼 전송 처리를 위한 bean 설정 -->
    <beans:bean id="multipartResolver"
        class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <beans:property name="maxUploadSize" value="102400000"/>
    </beans:bean>
	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven>
		<argument-resolvers>
			<beans:bean class="org.springframework.data.web.PageableHandlerMethodArgumentResolver" />
		</argument-resolvers>
	</annotation-driven>
	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
		<beans:property name="order" value="2" />
	</beans:bean>
	
	<!-- Tiles -->
    <beans:bean id="tilesConfigurer" class="org.springframework.web.servlet.view.tiles3.TilesConfigurer">
        <beans:property name="definitions">
            <beans:list>
                <beans:value>/WEB-INF/tiles/tiles.xml</beans:value>
            </beans:list>
        </beans:property>
    </beans:bean>        
    <beans:bean id="tilesViewResolver" class="org.springframework.web.servlet.view.UrlBasedViewResolver">
        <beans:property name="viewClass" value="org.springframework.web.servlet.view.tiles3.TilesView" />
        <beans:property name="order" value="1" />
    </beans:bean>    
 
	<context:component-scan base-package="com.acorn5.booking" />
	
	
	
</beans:beans>